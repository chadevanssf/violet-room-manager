<!DOCTYPE html>
<html ng-app="alexa" ng-controller="AlexaController">
  <head>
    <title>Violet</title>

    <link rel="stylesheet" href="../bootstrap-yeti.min.css">
    <script type="text/javascript" src="../jquery-3.2.1.min.js"></script>
    <script type="text/javascript" src="../bootstrap.min.js"></script>
    <script type="text/javascript">
    $(document).ready(function() {
      // Add minus icon for collapse element which is open by default
      $(".collapse.in").each(function() {
        $(this).siblings(".panel-heading").find(".glyphicon").addClass("glyphicon-minus").removeClass("glyphicon-plus");
      });

      // Toggle plus minus icon on show hide of collapse element
      $(".collapse").on('show.bs.collapse', function() {
        $(this).parent().find(".glyphicon").removeClass("glyphicon-plus").addClass("glyphicon-minus");
      }).on('hide.bs.collapse', function() {
        $(this).parent().find(".glyphicon").removeClass("glyphicon-minus").addClass("glyphicon-plus");
      });
    });
    </script>
    <script type="text/javascript" src="../angular.min.js"></script>
    <script type="text/javascript" src="../templates-json.js"></script>

    <script>
      function clone(o) {
        return JSON.parse(JSON.stringify(o));
      }

      // For Angular
      var app = angular.module('alexa', []);
      app.controller('AlexaController', function($scope, $http) {
        $scope.schema = <%-schema%>;
        $scope.request = {};
        $scope.response = null;
        $scope.responseSpeech = null;
        $scope.requestAndIntent = null;
        $scope.session = {};
        $scope.intent = null;
        $scope.locale = 'en-US';

        $scope.changelocale = function() {
          $scope.request.request.locale = $scope.locale;
        };

        $scope.changeRequestAndIntent = function() {
          var requestType = '';
          if ($scope.requestAndIntent === '') {
            $scope.request = {};
            return;
          }
          var intentNdx = $scope.requestAndIntent.indexOf(':');
          if (intentNdx == -1) {
            // not an intentRequest
            requestType = $scope.requestAndIntent;
            $scope.request = clone($scope.templates[requestType]);
            $scope.request.session.attributes = $scope.session;
            $scope.request.request.locale = $scope.locale;
            return;
          }
          requestType = $scope.requestAndIntent.substr(0, intentNdx);
          var intent = $scope.requestAndIntent.substr(intentNdx+1);
          $scope.request = clone($scope.templates[requestType]);
          $scope.request.session.attributes = $scope.session;
          $scope.request.request.intent.slots = {};
          $scope.request.request.intent.name = intent;
          $scope.request.request.locale = $scope.locale;
        }

        // get custom slot types
        $scope.customSlotTypes=[];
        $http.get(`${location.origin}${location.pathname}?schema=true&schemaType=skillBuilder`)
          .then(function onSuccess(response) {
            console.log('Recieved for skillBuilder: ', response.data.types);
            response.data.types.forEach(cst=>{
              cst.valuesStr = cst.values.map(v=>{return v.name.value}).join(', ');
            });
            $scope.customSlotTypes = response.data.types;
          }).catch(function onError(error) {
            console.log(error);
            console.log(error.message);
          });


        $scope.post = function() {
          if (Object.keys($scope.request).length !== 0) {
            $http.post(location.href, $scope.request)
              .then(function onSuccess(response) {
                $scope.response = response.data;
                // Copy session variables
                if ($scope.response) {
                  if ($scope.response.response && $scope.response.response.outputSpeech) {
                    $scope.responseSpeech = $scope.response.response.outputSpeech.ssml;
                  } else {
                    $scope.responseSpeech = 'Error - No outputSpeech';
                  }
                  if ($scope.response.sessionAttributes) {
                    $scope.session = $scope.response.sessionAttributes;
                    $scope.request.session.attributes = $scope.session;
                  }
                }
              })
              .catch(function onError(error) {
                alert(error.message);
              });
            } else {
              alert("Error: Cannot send an empty request object. Please select a request type.");
            }
        }

        $scope.getIntent = function() {
          try {
            var intents = $scope.schema.intents;
            for (var i = 0; i < intents.length; i++) {
              var intent = intents[i];
              if (intent.intent == $scope.request.request.intent.name) {
                return intent;
              }
            };
            return null;
          } catch(e) { return null; }
        };

        $scope.templates = templates;

        // Extract the applicationId if it exists and update the templates
        var applicationId = "<%= app.id || "" %>";
        if (applicationId) {
          $scope.templates.launch.session.application.applicationId = applicationId;
          $scope.templates.intent.session.application.applicationId = applicationId;
          $scope.templates.session_end.session.application.applicationId = applicationId;
        }
      });
    </script>

    <style>
    body {
      padding-top: 50px;
    }
    body > .container {
      margin-top: 6px;
    }
    .glyphicon {
      margin-right: 2px;
    }
    .panel-group, #requestAndIntent {
      margin-top: 6px;
      margin-bottom: 6px;
    }
    .code {
      white-space:pre;
      font-family:monospace;
      font-size: 0.9em;
      border:1px solid #666;
      /*display:inline-block;*/
      padding:5px;
      min-width:400px;
      max-height:200px;
      min-height:25px;
      overflow: scroll;
    }
    </style>
  </head>

  <body>

    <nav class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <a class="navbar-brand" href="#">Violet</a>
        </div>
        <div id="navbar" class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li class="active"><a href="#test" data-toggle="tab">Test</a></li>
            <li><a href="#register" data-toggle="tab">Register</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>

    <div class="container">

      <div class="tab-content">
        <div role="tabpanel" class="tab-pane active" id="test">
          <p>Use the below to test your script. This is a simple testing utility to POST to your endpoint and simulate an Alexa request.</p>

          <h3>Request</h3>
          <div>
            <div id="locale">
              Locale:
              <select id="locale" ng-model="locale" ng-change="changelocale()">
                <option value="en-US">en-US</option>
                <option value="en-GB">en-GB</option>
                <option value="de-DE">de-DE</option>
              </select>
            </div>

            <div id="requestAndIntent">
              Intent:
              <select id="requestIntent_select" ng-change="changeRequestAndIntent()" ng-model="requestAndIntent">
                <option value=""></option>
                <option value="LaunchRequest">&lt;&lt;Launch&gt;&gt;</option>
                <% for (name in app.intents) { %>
                  <option value="IntentRequest:<%=name%>"><%=name%>: <%=app.intents[name].utterances.toString().substr(0,80)%></option>
                <% } %>
                <option value="SessionEndedRequest">&lt;&lt;End&gt;&gt;</option>
              </select>
            </div>

            <div id="slots" ng-show="getIntent().slots.length">
              Slot Values: <br>
              <div id="slotvalues" style="margin:5px;border:1px solid #ccc;display:inline-block;">
                <div ng-repeat="slot in getIntent().slots">
                  {{slot.name}} : <input ng-change="request.request.intent.slots[slot.name].name=slot.name" ng-model="request.request.intent.slots[slot.name].value" style="width:100px;">
                </div>
              </div>
            </div>
          </div>

          <div id="accordion" class="panel-group">
            <div class="panel panel-default">
              <div class="panel-heading">
                <h4 class="panel-title">
                  <a data-toggle="collapse" data-parent="#accordion" href="#rawRequestData"><span class="glyphicon glyphicon-plus"></span>Raw</a>
                </h4>
              </div>
              <div id="rawRequestData" class="panel-collapse collapse">
                <div class="panel-body">
                  <div id="request" class="code" contenteditable="true">{{request|json}}</div>
                </div>
              </div>
            </div>
          </div>
          <div>
            <input type="button" value="Send Request" ng-click="post()">
          </div>

          <h3>Response</h3>
          <div ng-show="response">
            <p>{{responseSpeech}}</p>
            <div id="accordion" class="panel-group">
              <div class="panel panel-default">
                <div class="panel-heading">
                  <h4 class="panel-title">
                    <a data-toggle="collapse" data-parent="#accordion" href="#rawResponseData"><span class="glyphicon glyphicon-plus"></span>Raw</a>
                  </h4>
                </div>
                <div id="rawResponseData" class="panel-collapse collapse">
                  <div class="panel-body">
                    <div id="response" class="code">{{response|json}}</div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <h3>Session</h3>
          <div ng-show="session">
            <div id="accordion" class="panel-group">
              <div class="panel panel-default">
                <div class="panel-heading">
                  <h4 class="panel-title">
                    <a data-toggle="collapse" data-parent="#accordion" href="#rawSessionData"><span class="glyphicon glyphicon-plus"></span>Raw</a>
                  </h4>
                </div>
                <div id="rawSessionData" class="panel-collapse collapse">
                  <div class="panel-body">
                    <div id="session" class="code">{{session|json}}</div>
                  </div>
                </div>
              </div>
            </div>
          </div>

        </div>
        <div role="tabpanel" class="tab-pane" id="register">
          <p>Your Violet Conversation needs to be registered so that Alexa knows about it.</p>

          <h1>Step by Step</h1>

          <h2>1. Go to Amazon Dev URL:</h2>

          <a href="https://developer.amazon.com/edw/home.html#/">https://developer.amazon.com/edw/home.html#/</a>

          <p>
            If you don't have an account, register as a new developer. Amazon
            Developer Accounts are different from Amazon Web Services accounts,
            and the former are around capabilities where they might need to pay
            you while the later focus on on capabilities where they might need
            to charge you.
          </p>

          <h2>2. Create a new Skill</h2>

          <p>
            Skills are created by going to the Alexa heading, and then to the Alexa Skills Kit:
            <img src="../alexa-reg/create-new-skill.png"/>
          </p>

          <h2>3. Skill Information</h2>

          <p>Fill in:</p>
          <ol>
            <li>name: [choose a name]</l1>
            <li><b>invocation name</b>: [choose a name] <i>this is the name that you will call your script when you launch Alexa</i></li>
          </ol>


          <h2>4. Custom Interaction Model</h2>

          <!-- Go to your deployed service page, for example: https://violet-conversations.herokuapp.com/alexa/einstein -->

          <h3>A. Intent Schema</h3>

          <p>1. Copy the values below:</p>
          <div>
            <div id="schema" class="code">{{schema|json}}</div>
          </div>

          <p>
            2. Paste into the following Amazon Intent Schema section:
            <img src="../alexa-reg/intent-schema.png"/>
          </p>

          <h3>B. Set Custom Slot Type</h3>
          Set the following values in the Custom Slot Types section.
          <ul>
            <li ng-repeat="cst in customSlotTypes"><b>Type:</b> {{cst.name}}; <b>Values:</b> {{cst.valuesStr}}</li>
          </ul>

          <h3>C. Sample Utterances</h3>

          <p>1. Copy the values below:</p>
          <div>
            <div id="utterances" class="code"><%=utterances%></div>
          </div>

          <p>
            2. Paste into the following Amazon section:
            <img src="../alexa-reg/sample-utterances.png"/>
          </p>

          <h2>5. Configuration</h2>

          <p>Select Endpoint Type: HTTPS</p>
          <p>Url:
            <script>
              var myUrl = window.location.href;
              if (myUrl.endsWith('#')) myUrl = myUrl.substr(0, myUrl.length-1);
              document.write(myUrl);
            </script>
          </p>

          <h2>6. SSL Certificate</h2>

          <p>
            If you have deployed this service on Heroku, select the second
            option: 'My development endpoint is a sub-domain
            of a domain that has a wildcard certificate from a certificate
            authority'<br/>
            <img src="../alexa-reg/certificate.png"/>
          </p>

          <h2>7. Testing, Publishing, Privacy &amp; Compliance</h2>

          <p>
            You should be done without worrying about these tabs. You only need
            to publish the skill when you want others to be able to discover it
            without following the above steps.
          </p>


        </div>
      </div>


    </div><!-- /.container -->

  </body>
</html>
